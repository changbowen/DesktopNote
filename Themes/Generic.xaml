<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:l="clr-namespace:DesktopNote">
    <l:RectConverter x:Key="RectConverter"/>
    <!--rounded content control base-->
    <Style x:Key="ContentControlBaseStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="true" 
                            CornerRadius="3">
                        <Border.Clip>
                            <RectangleGeometry RadiusX="{Binding RelativeSource={RelativeSource AncestorType=Border}, Path=CornerRadius.TopLeft}"
                                               RadiusY="{Binding RelativeSource={RelativeSource AncestorType=Border}, Path=CornerRadius.BottomRight}">
                                <RectangleGeometry.Rect>
                                    <MultiBinding Converter="{StaticResource RectConverter}" ConverterParameter="0 0">
                                        <Binding RelativeSource="{RelativeSource AncestorType=Border}" Path="ActualWidth"/>
                                        <Binding RelativeSource="{RelativeSource AncestorType=Border}" Path="ActualHeight"/>
                                    </MultiBinding>
                                </RectangleGeometry.Rect>
                            </RectangleGeometry>
                        </Border.Clip>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--system buttons-->
    <Style TargetType="{x:Type Button}" x:Key="WindowButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                        x:Name="Chrome"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Margin="0"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <!--<Setter Property="FontSize" Value="13.333" />-->
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="Margin" Value="0,2,3,0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="RoundedWindowControlTemplate" TargetType="{x:Type l:RoundedWindow}">
        <Grid x:Name="Grid_Main" RenderTransformOrigin="{TemplateBinding RenderTransformOrigin_BG}">
            <Grid.CacheMode>
                <BitmapCache/>
            </Grid.CacheMode>
            <Grid.RenderTransform>
                <ScaleTransform ScaleX="0" ScaleY="0"/>
            </Grid.RenderTransform>
            
            <!--挖空shadow layer-->
            <Rectangle Margin="10" RadiusX="{TemplateBinding CornerRadius}" RadiusY="{TemplateBinding CornerRadius}" Fill="Black">
                <Rectangle.Effect>
                    <DropShadowEffect ShadowDepth="0" BlurRadius="8"/>
                </Rectangle.Effect>
                <Rectangle.Clip>
                    <CombinedGeometry GeometryCombineMode="Exclude">
                        <CombinedGeometry.Geometry1>
                            <RectangleGeometry RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                               RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}">
                                <RectangleGeometry.Rect>
                                    <MultiBinding Converter="{StaticResource RectConverter}" ConverterParameter="10">
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </RectangleGeometry.Rect>
                            </RectangleGeometry>
                        </CombinedGeometry.Geometry1>
                        <CombinedGeometry.Geometry2>
                            <RectangleGeometry RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                               RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}">
                                <RectangleGeometry.Rect>
                                    <MultiBinding Converter="{StaticResource RectConverter}">
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </RectangleGeometry.Rect>
                            </RectangleGeometry>
                        </CombinedGeometry.Geometry2>
                    </CombinedGeometry>
                </Rectangle.Clip>
            </Rectangle>

            <!--background-->
            <Rectangle Margin="10" RadiusX="{TemplateBinding CornerRadius}" RadiusY="{TemplateBinding CornerRadius}" Fill="{TemplateBinding Background}"/>

            <!--window title-->
            <TextBlock Margin="20,15,0,0" Text="{TemplateBinding Title}" Foreground="Gray" FontSize="10" HorizontalAlignment="Left" VerticalAlignment="Top"/>

            <!--the close button-->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top">
                <Button x:Name="minimizeButton" Style="{StaticResource WindowButtonStyle}" Content="0" Visibility="Collapsed" Margin="0,15,15,0"/>
                <Button x:Name="restoreButton" Style="{StaticResource WindowButtonStyle}" Content="1" Visibility="Collapsed" Margin="0,15,15,0"/>
                <Button x:Name="closeButton" Style="{StaticResource WindowButtonStyle}" Content="r" Visibility="Collapsed" Margin="0,15,15,0"/>
            </StackPanel>
            
            <!--the real content-->
            <ContentPresenter x:Name="WindowContent" Margin="18" Content="{TemplateBinding Content}"/>

            <!--resize grip-->
            <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsTabStop="false" Visibility="Collapsed"/>
        </Grid>
        
        <ControlTemplate.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="ButtonCloseVisible" Value="True">
                <Setter TargetName="closeButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="WindowContent" Property="Margin" Value="20,30,20,20"/>
            </Trigger>
            <Trigger Property="ButtonMaxVisible" Value="True">
                <Setter TargetName="restoreButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="WindowContent" Property="Margin" Value="20,30,20,20"/>
            </Trigger>
            <Trigger Property="ButtonMinVisible" Value="True">
                <Setter TargetName="minimizeButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="WindowContent" Property="Margin" Value="20,30,20,20"/>
            </Trigger>
            <EventTrigger RoutedEvent="l:RoundedWindow.FadingIn">
                <!--<BeginStoryboard Storyboard="{StaticResource SB_In}"/>-->
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Window.Opacity)">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                       Storyboard.TargetName="Grid_Main">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                       Storyboard.TargetName="Grid_Main">
                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseOut"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="l:RoundedWindow.FadingOut">
                <!--<BeginStoryboard Storyboard="{StaticResource SB_Out}"/>-->
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Window.Opacity)" FillBehavior="Stop">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                       Storyboard.TargetName="Grid_Main" FillBehavior="Stop">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.5">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseIn"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                       Storyboard.TargetName="Grid_Main" FillBehavior="Stop">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.5">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <CubicEase EasingMode="EaseIn"/>
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Window style-->
    <Style TargetType="{x:Type l:RoundedWindow}">
        <Setter Property="Template" Value="{StaticResource RoundedWindowControlTemplate}"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" Opacity="0.8">
                    <GradientStop Color="White" Offset="0"/>
                    <GradientStop Color="#FFD6D6D6" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="CacheMode">
            <Setter.Value>
                <BitmapCache/>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>